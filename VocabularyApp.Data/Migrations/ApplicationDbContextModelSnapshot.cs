// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VocabularyApp.Data;

#nullable disable

namespace VocabularyApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VocabularyApp.Data.Models.ChatHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CreatedAt");

                    b.ToTable("ChatHistories");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.PartOfSpeech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PartsOfSpeech");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "n.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Noun"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "v.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Verb"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "adj.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Adjective"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "adv.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Adverb"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "pron.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Pronoun"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "prep.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Preposition"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "conj.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Conjunction"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "interj.",
                            CreatedAt = new DateTime(2025, 10, 4, 20, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Interjection"
                        });
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizType")
                        .HasColumnType("int");

                    b.Property<int>("ResponseTimeSeconds")
                        .HasColumnType("int");

                    b.Property<string>("UserAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserWordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserWordId");

                    b.HasIndex("UserId", "AttemptedAt");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.SampleSentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserWordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserWordId");

                    b.ToTable("SampleSentences");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.UserWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastCorrectAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartOfSpeechId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.HasIndex("UserId");

                    b.HasIndex("WordId");

                    b.ToTable("UserWords");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdatedFromApi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("Words");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.WordDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Example")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PartOfSpeechId")
                        .HasColumnType("int");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.HasIndex("WordId", "PartOfSpeechId", "DisplayOrder")
                        .IsUnique();

                    b.ToTable("WordDefinitions");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.ChatHistory", b =>
                {
                    b.HasOne("VocabularyApp.Data.Models.User", "User")
                        .WithMany("ChatHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.QuizResult", b =>
                {
                    b.HasOne("VocabularyApp.Data.Models.User", "User")
                        .WithMany("QuizResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VocabularyApp.Data.Models.UserWord", "UserWord")
                        .WithMany()
                        .HasForeignKey("UserWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserWord");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.SampleSentence", b =>
                {
                    b.HasOne("VocabularyApp.Data.Models.User", "User")
                        .WithMany("SampleSentences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VocabularyApp.Data.Models.UserWord", "UserWord")
                        .WithMany("SampleSentences")
                        .HasForeignKey("UserWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserWord");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.UserWord", b =>
                {
                    b.HasOne("VocabularyApp.Data.Models.PartOfSpeech", null)
                        .WithMany("UserWords")
                        .HasForeignKey("PartOfSpeechId");

                    b.HasOne("VocabularyApp.Data.Models.User", "User")
                        .WithMany("UserWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VocabularyApp.Data.Models.Word", "Word")
                        .WithMany("UserWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.WordDefinition", b =>
                {
                    b.HasOne("VocabularyApp.Data.Models.PartOfSpeech", "PartOfSpeech")
                        .WithMany("WordDefinitions")
                        .HasForeignKey("PartOfSpeechId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VocabularyApp.Data.Models.Word", "Word")
                        .WithMany("WordDefinitions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfSpeech");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.PartOfSpeech", b =>
                {
                    b.Navigation("UserWords");

                    b.Navigation("WordDefinitions");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.User", b =>
                {
                    b.Navigation("ChatHistories");

                    b.Navigation("QuizResults");

                    b.Navigation("SampleSentences");

                    b.Navigation("UserWords");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.UserWord", b =>
                {
                    b.Navigation("SampleSentences");
                });

            modelBuilder.Entity("VocabularyApp.Data.Models.Word", b =>
                {
                    b.Navigation("UserWords");

                    b.Navigation("WordDefinitions");
                });
#pragma warning restore 612, 618
        }
    }
}
